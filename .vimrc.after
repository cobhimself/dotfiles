" vim: set foldmarker={,} foldlevel=1 foldmethod=marker modelines=4
" Environment {
"     Windows Compatibility {
		" On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
		" across (heterogeneous) systems easier. 
		"if has('win32') || has('win64')
		  "set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
		"endif
"     }
" }

" General Options {
"

    " Formatting {
        set autoindent                 	" indent at the same level of the previous line
        set matchpairs+=<:>             " Match, to be used with %
        set comments=sr:/*,mb1:*,exr:*/,sr:/**,mb1:*,exr:*/,://  " Auto format comment blocks
        set formatoptions=tcroql        " For automatic formatting.
        set pastetoggle=<F12>          	" pastetoggle (sane indentation on pastes)
    " }
	set background=dark             " Assume a dark background
    set vb t_vb=""		            " I don't care about bells
    set virtualedit=all             " Turn virtual edit on
    set hidden                      " Don't need to save files to hide them
    set lazyredraw                  " Don't update the display while executing macros
    set textwidth=79                " set the text width to 79
    set wrapscan                    " Wrap the scan
    set ch=2                        " Make the command line two lines high
    set foldopen=block,insert,jump,mark,percent,quickfix,search,tag,undo " These commands open folds
    set synmaxcol=2048              " Syntax coloring lines that are too long is too slow
    set smartcase                   " Set the search to scan so it ignores case when the search is all lowercase but recognizes uppercase if it's specified.                      
    set shellslash                  " set the forward slash to be the slash to use
    set backspace=2                 " Allow backspacing over indent, eol, and the start of an insert
	set autowrite                   " automatically write a file when leaving a modified buffer
	set shortmess+=filmnrxoOtT     	" abbrev. of messages (avoids 'hit enter')
	set viewoptions=folds,options,cursor,unix,slash " better unix / windows compatibility
	set history=1000  				" Store a ton of history (default is 20)
	set nospell    	 	        	" spell checking on

    " When the page starts to scroll, keep the cursor 8 lines from the top and 8
    " lines from the bottom
    set scrolloff=8

    set showfulltag                 " When completing by tag, show the whole tag, not just the function name
    set fillchars=""                " get rid of the silly characters in window separators
    set expandtab                   " Turn tabs into spaces

    " GUI Options {

        " Give access to the menu items within the console
        so $VIMRUNTIME/menu.vim
        set cpo-=<
        set wcm=<C-Z>
        map <C-CR> :emenu <C-Z>

        set mouse=a					    " automatically enable mouse usage

        " Setup the general guioptions
        set guioptions+=c               " Don't show gui popups, put them in the console.
        set guioptions-=r               " No right hand scrollbar.
        set guioptions-=l               " No left hand scrollbar.
        set guioptions-=b               " No bottom hand scrollbar.

        " Set up the gui cursor to look nice
        set guicursor=n-v-c:block-Cursor-blinkon0
        set guicursor+=ve:ver35-Cursor
        set guicursor+=o:hor50-Cursor
        set guicursor+=i-ci:ver25-Cursor
        set guicursor+=r-cr:hor20-Cursor
        set guicursor+=sm:block-Cursor-blinkwait175-blinkoff150-blinkon175

        "color railscast     	       		    " load a colorscheme
        color cob     	       		    " load a colorscheme
        let python_highlight_all=1      " Use all highlighting from python syntax
        set tabpagemax=15 				" only show 15 tabs
        set showmode                   	" display the current mode

        set cursorline  				" highlight current line
        hi cursorline guibg=#333333 	" highlight bg color of current line
        hi CursorColumn guibg=#333333   " highlight cursor

        if has('cmdline_info')
            set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " a ruler on steroids
            set showcmd                	" show partial commands in status line and
                                        " selected characters/lines in visual mode
        endif

        if has('statusline')
            set laststatus=1           	" show statusline only if there are > 1 windows
            set statusline=%<%t\ %h%m%r%{fugitive#statusline()}[%Y,%{&ff}]\ %=[ASCII=\%03.3b]\ [HEX=\%02.2B]\ %-14.(%l,%c%V%)\ %P
        endif

        set backspace=indent,eol,start 	" backspace for dummys
        set linespace=0 				" No extra spaces between rows
        set showmatch                  	" show matching brackets/parenthesis
        set incsearch 					" find as you type search
        set winminheight=0 				" windows can be 0 line high 
        set wildmenu 					" show list instead of just completing
        set wildmode=list:longest,full 	" comand <Tab> completion, list matches, then longest common part, then all.
        set whichwrap=b,s,h,l,<,>,[,]	" backspace and cursor keys wrap to
        set scrolljump=5 				" lines to scroll when cursor leaves screen
        set scrolloff=3 				" minimum lines to keep above and below cursor
        set foldenable  				" auto fold code
        set gdefault					" the /g flag on :s substitutions by default
    " }

    " Folder Locations {
    "
		set backup 						" backups are nice ...
		set viewdir=$HOME/.vim/_views// 	" same for view files
		
		"" Creating directories if they don't exist
		"silent execute '!mkdir -p $HOME/.vimbackup'
		"silent execute '!mkdir -p $HOME/.vimswap'
		"silent execute '!mkdir -p $HOME/.vimviews'
		au BufWinLeave * silent! mkview  "make vim save view (state) (folds, cursor, etc)
		au BufWinEnter * silent! loadview "make vim load view (state) (folds, cursor, etc)
    " }

" }

" Key Mappings { "
    " Open NERD Tree
    nmap <silent> <leader>nt :NERDTreeToggle<cr>

    " Save and reload the current file.
    nmap <silent> <leader>re :w <cr>:e %<cr>

    " Run the command that was just yanked
    nmap <silent> <leader>rc :@"<cr>

    " allow command line editing like emacs
    cnoremap <C-A>      <Home>
    cnoremap <C-B>      <Left>
    cnoremap <C-E>      <End>
    cnoremap <C-F>      <Right>
    cnoremap <C-N>      <End>
    cnoremap <C-P>      <Up>
    cnoremap <ESC>b     <S-Left>
    cnoremap <ESC><C-B> <S-Left>
    cnoremap <ESC>f     <S-Right>
    cnoremap <ESC><C-F> <S-Right>
    cnoremap <ESC><C-H> <C-W>

    " Maps to make handling windows a bit easier
    noremap <silent> <leader>h :wincmd h<CR>
    noremap <silent> <leader>j :wincmd j<CR>
    noremap <silent> <leader>k :wincmd k<CR>
    noremap <silent> <leader>l :wincmd l<CR>
    noremap <silent> <leader>sb :wincmd p<CR>
    noremap <silent> <C-F9>  :vertical resize -10<CR>
    noremap <silent> <C-F10> :resize +10<CR>
    noremap <silent> <C-F11> :resize -10<CR>
    noremap <silent> <C-F12> :vertical resize +10<CR>
    noremap <silent> <leader>bn :bn<CR>
    noremap <silent> <leader>bp :bp<CR>
    noremap <silent> <leader>s8 :vertical resize 83<CR>
    noremap <silent> <leader>cj :wincmd j<CR>:close<CR>
    noremap <silent> <leader>ck :wincmd k<CR>:close<CR>
    noremap <silent> <leader>ch :wincmd h<CR>:close<CR>
    noremap <silent> <leader>cl :wincmd l<CR>:close<CR>
    noremap <silent> <leader>cc :close<CR>
    noremap <silent> <leader>cw :cclose<CR>
    noremap <silent> <leader>ml <C-W>L
    noremap <silent> <leader>mk <C-W>K
    noremap <silent> <leader>mh <C-W>H
    noremap <silent> <leader>mj <C-W>J
    noremap <silent> <C-7> <C-W>>
    noremap <silent> <C-8> <C-W>+
    noremap <silent> <C-9> <C-W>+
    noremap <silent> <C-0> <C-W>>

    " Move the current window forward (to the right) of the next window in the row
    nmap <silent> <leader>mf <C-W>r

    " Move the current window backwards (to the left) of the next window in the row
    nmap <silent> <leader>mb <C-W>R

    " Search the current file for what's currently in the search
    " register and display matches
    nmap <silent> <leader>gs
         \ :vimgrep /<C-r>// %<CR>:ccl<CR>:cwin<CR><C-W>J:set nohls<CR>

    " Search the current file for the word under the cursor and display matches
    nmap <silent> <leader>gw
         \ :vimgrep /<C-r><C-w>/ %<CR>:ccl<CR>:cwin<CR><C-W>J:set nohls<CR>

    " Search the current file for the WORD under the cursor and display matches
    nmap <silent> <leader>gW
         \ :vimgrep /<C-r><C-a>/ %<CR>:ccl<CR>:cwin<CR><C-W>J:set nohls<CR>

    " The following beast is something i didn't write... it will return the
    " syntax highlighting group that the current "thing" under the cursor
    " belongs to -- very useful for figuring out what to change as far as
    " syntax highlighting goes.
    nmap <silent> <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name")
         \ . '> trans<' . synIDattr(synID(line("."),col("."),0),"name")
         \ . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name")
         \ . ">"<CR>

	" Change Working Directory to that of the current file
    cmap cwd lcd %:p:h

    " For when you forget to sudo.. Really Write the file.
    "cmap w!! w !sudo tee % >/dev/null
" }

" Plugins {

    " NERDTree {
        let NERDTreeMinimalUI = 1       "No need to show UI labels
        let NERDTreeShowBookmarks = 1
        let NERDTreeChDirMode = 2       "Change the CWD when root changes
        let NERDTreeHijackNetrw = 1     "Hijack Netrw
		let g:NERDShutUp=1
    " }

    " Syntastic {
        let g:syntastic_enable_signs = 1
        let g:syntastic_enable_highlighting = 1
    " }

    " Flake8 {
        autocmd BufWritePost *.py call Flake8()
    " }

    " NERDComment {
		"comment out line(s) in visual mode
		vmap  o  :call NERDComment(1, 'toggle')<CR>
    " }

	" Supertab {
        let g:SuperTabDefaultCompletionType = "context"
		let g:SuperTabDefaultCompletionType = "context"
        set completeopt=menuone,longest,preview
        "let g:SuperTabContextDefaultCompletionType = "<c-x><c-o>"
	" }

	" Misc { 
		let g:checksyntax_auto = 0
		let b:match_ignorecase = 1
	" }

	" ShowMarks {
		let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
		" Don't leave on by default, use :ShowMarksOn to enable
		let g:showmarks_enable = 0
        map <silent> <F2> :ShowMarksToggle<CR>
	" }
	
	" Ctags {
		set tags=./tags;/,~/.vimtags
	" }

    " Tagbar {
        let g:tagbar_ctags_bin = '/usr/local/Cellar/ctags/5.8/bin/ctags'
        let g:tagbar_type_extendscript = {
            \ 'kinds' : [
                \ 'v:global variables:0:0',
                \ 'c:classes',
                \ 'p:properties:0:0',
                \ 'm:methods',
                \ 'f:functions',
            \ ],
        \ }
    " }

	" AutoCloseTag {
		" Make it so AutoCloseTag works for xml and xhtml files as well
		au FileType xhtml,xml ru ftplugin/html/autoclosetag.vim
	" }

	" SnipMate {
		" Setting the author var
		let g:snips_author = 'Collin D. Brooks <collin.brooks@gmail.com>'
		" Shortcut for reloading snippets, useful when developing
		nnoremap <leader>smr <esc>:exec ReloadAllSnippets()<cr>
	" }

" }

" Custom Functions {
" }

" Startup Settings {
    " Auto Full Screen Mode
    if has("gui_running")
        set fuoptions=maxvert,maxhorz
        au GUIEnter * set fullscreen
    endif

    command! -n=0 Dumbq :%s/“/"/e | :s/”/"/e | :s/’/'/e

    "Load NERDTree on startup
    autocmd VimEnter * NERDTree
    autocmd VimEnter * wincmd p
" }
